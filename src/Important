makeTreeInSidebar
DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode();
        fileTree = new JTree(rootNode);
        fileTree.setBackground(Color.DARK_GRAY);
        fileTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        fileTree.addTreeSelectionListener(new TreeSelectionListener() {
            @Override
            public void valueChanged(TreeSelectionEvent e) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) fileTree.getLastSelectedPathComponent();
                if (node != null) {
                    Object userObject = node.getUserObject();
                    if (userObject instanceof File file) {
                        JTextPane newFileTextPane = new JTextPane();
                        newFileTextPane.setFont(new Font("MonoSpaced", Font.PLAIN, 12));
                        newFileTextPane.setBackground(Color.DARK_GRAY);
                        newFileTextPane.setForeground(Color.WHITE);
                        openFileInEditor(file, newFileTextPane);
                    }
                }
            }
        });

        scrollPane = new JScrollPane(fileTree);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);

        sideBar.add(scrollPane);

viewSidebar
sideBar = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
        sideBar.setBackground(Color.WHITE);
        sideBar.setPreferredSize(new Dimension(200, getHeight()));
        sideBar.setMinimumSize(new Dimension(0, getHeight()));
        sideBar.setMaximumSize(new Dimension(200, getHeight()));

        // Create the initial tree and load it into the sidebar
        makeTreeInSidebar();

        return sideBar;

openFolder
fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            parentDir = fileChooser.getSelectedFile();
            if (parentDir != null && parentDir.isDirectory()) {
                DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode) fileTree.getModel().getRoot();
                DefaultMutableTreeNode folderNode = new DefaultMutableTreeNode(parentDir.getName());
                rootNode.add(folderNode);
                loadFolderIntoSidebar(parentDir, rootNode);
                ((DefaultTreeModel) fileTree.getModel()).reload(rootNode);
            }
        }

loadFolderIntoSidebar
if (folder.isDirectory()) {
            parentDir.removeAllChildren();
            File[] files = folder.listFiles();
            if (files != null) {
                for (File file : files) {
                    if (file.isFile()) {
                        String extension = getFileExtension(file.getName());
                        if (isProgrammingFile(extension) || isImageFile(extension)) {
                            DefaultMutableTreeNode childNode= new DefaultMutableTreeNode(file);
                            parentDir.add(childNode);
                        }
                    } else if (file.isDirectory()) {
                        DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(file);
                        parentDir.add(childNode);
                        loadFolderIntoSidebar(file, childNode);
                    }
                }
            }
            ((DefaultTreeModel) fileTree.getModel()).reload(parentDir);
        }